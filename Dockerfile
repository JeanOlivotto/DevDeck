# Stage 1: Build da aplicaÃ§Ã£o NestJS
FROM node:20-alpine AS builder

WORKDIR /app

# Copiar package.json e yarn.lock (ou package-lock.json)
COPY devdeck-backend/package.json devdeck-backend/yarn.lock* devdeck-backend/package-lock.json* ./

# Instalar dependÃªncias
RUN npm install --omit=dev || npm ci --omit=dev

# Copiar cÃ³digo-fonte do backend
COPY devdeck-backend .

# Gerar Prisma Client
RUN npx prisma generate

# Build da aplicaÃ§Ã£o NestJS
RUN npm run build

# Stage 2: Imagem final com frontend estÃ¡tico e backend
FROM node:20-alpine

WORKDIR /app

# Instalar servidor HTTP simples para servir arquivos estÃ¡ticos
RUN npm install -g serve

# Copiar dependÃªncias do stage anterior
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/prisma ./prisma

# Copiar arquivo .env (serÃ¡ sobrescrito em runtime se necessÃ¡rio)
COPY devdeck-backend/.env .env

# Copiar frontend para ser servido
COPY devdeck-frontend ./public

# Expor portas
EXPOSE 3000 3001

# Script de inicializaÃ§Ã£o
RUN mkdir -p /app/scripts
RUN cat > /app/scripts/start.sh << 'EOF'
#!/bin/sh
set -e

echo "ðŸ”§ Executando migraÃ§Ãµes Prisma..."
npx prisma migrate deploy

echo "ðŸš€ Iniciando servidor NestJS na porta 3000..."
node dist/main.js &
BACKEND_PID=$!

echo "ðŸ“¦ Servindo frontend na porta 3001..."
serve -s public -l 3001 &
FRONTEND_PID=$!

wait $BACKEND_PID $FRONTEND_PID
EOF

RUN chmod +x /app/scripts/start.sh

CMD ["/app/scripts/start.sh"]